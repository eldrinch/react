Mapa de eventos
1.1.1. Fundamento de eventos - Parte I
https://youtu.be/_Q5S8Cs1lqM
Mapa de eventos de uma aplicação web,
Manipuladores de eventos o que sao, quais sao os Manipuladores existentes
Arquiterura de eventos o que acontece por tras quando um evento é disparado
Interface event: Base de nossos objetos de eventos
Manipuladores de eventos, um evento é de tres tipos
Mutaçao , altera a estrutura do DOM
Logicos disparados por sistemas ou otro sistema dispara de um sistema externo
Interface de Usuario, interage a traves da aplicação web são disparados os eventos.
As açoẽs de um evento são definidas pelos Manipuladores de eventos são
In-line, atribui diretamente na estrutura do DOM
Atribuidos, Propiedades dos elementos do DOM
Metodos DOM2, addEventlistener() e removeEventListener() no IE atachEvent()
Argumentos dos eventos; Quando se define o manipulador se define uma função que receve um parametro que contem as informaçoes inherentes ao evento informaçoes adicionais depende do tipo de evento (e)

1.1.2. Fundamento de eventos - Parte II
https://youtu.be/441VV0wsCqA
Cada tipo de evento trae algum tipo de informaçao ai depende do tipo de evento, esses argumantos que cabem, quando o evento é disparado o que acontece é classificado em 3 fases
Capturing: O evento e disparado mas executado primeiro nos elementos ancestrais.
Target; Seu usuario em cada boton dentro da estrutura da arvore DOM
Bubing A açaõ acontece primeiro no target e depois propagada para os eventos ancestrais ao contrario do Capturing.
Event interface: Event Reference developer.mozilla.org - events informaçoes desta interface, cada event é baseaso em interface event, todas as funçoes de cada tipo de eventos, relacionados ao teclado, mouse, posiçao, cada interface tem suas Propiedades adicionais ex MouseEvent, a interface Events é a base.

1.2. UIEvent - Evento da interface de usuário
https://youtu.be/HL1j9YKcpsU
UIEvent eventos de interface de usuario, Eventos: load, unload, abort, error, select e resize. Propiedades view e detail. Refencia UIEvnt é uma interface as propiedades são herdadas para esta interface

1.3.1. MouseEvent - Eventos do Mouse - Parte I
https://youtu.be/7kYdeH30iww
Mouse Event; mouseDown, mouseup, mouseover, mouseout, mousemove.
click, dblclick, mouseenter, mouseleave, e contextmenu.
Ordem dos e eventos: Mousedown -> mouseup -> click.
Propiedades: ScreenX, screenY, clientX, clientY, alterKey, ctrlKey, shiftKey, metaKey, button, buttons, relatedtargets.

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

1.3.2. MouseEvent - Eventos do Mouse - Parte II
https://youtu.be/6jUMTNyzi8Q
Mouseover e mouseout e Ordem de execuçao dos Eventos

1.4. KeyboardEvent - Eventos do teclado
https://youtu.be/DrnK3MMdLlQ
Eventos; keydown e keyup
Ordem dos eventos; keysown, beforeinput, input e keyup.
Propiedades; key, code, location, altKey, shiftKey, ctrlKey, metaKey, repeat, isComposing.

1.5. FocusEvent - Eventos de foco
https://youtu.be/ffJHXjajZns
FocusEvent, eventos relacionados ao foco, 
Eventos; Focusin 'recebo o foco', focusout 'perdi o foco de algum elemento', blur e focus 'estou com o foco'
Ordem dos Eventos; 
Focusin -> focus.
Focusout -> focusin -> blur -> focus.
Propiedades; RelatedTerget 'de qual elemento estou perdendo o foco'

JavaScript: Funções - Parte I
https://youtu.be/c5cHxIgVNDc
2.1. Escopos; Define a acesivilidade das variaveis dentro de nosso aplicação, projeto, temos o escopo global e o 
Local sao variavies dentro de blocos de laços de repetição de estruturas condicionais, as variaveis locais podem ser de escopo função e escopo bloco

2.2.1. Closures - Parte I
https://youtu.be/QQofbUbLcYw
Closures ou fechamentos, permite que funçoes aninhadas accesem variveis fora do seu escopo, o escopo lexico dentro do JS orientaçao de objetos, encapsulamento

2.2.2. Closures - Parte II   
https://youtu.be/x1Q6GSsIVCs

2.3. Prototypes
https://youtu.be/hmNbn0f2OlA
è um objeto toda funçao recebe uma propiedade chamada prototype tem uma referencia a uma outra propiedade chamada _PROTO_ que herda do object, permite adicionar propiedades, metodos ou funcoes a uma o mais instancias de um objeto de uma função que a gente declara. Isso posibilita heranca, reutilizaçao de objetos, consumo de memoria

JavaScript: Funções - Parte II
2.4. IIFE - Funções imediatas; Immediately Invoked Function Espression, logar tan logo que uma função for definida
Function Declaration 
function myFunction (){ /* codigo*/}

Function Expression
let myFunction = function(){/*codigo*/}

Inmmediately Invoked Function Expression
(function(){})();
Um dos beneficios é que da privacidade de minhas funçoes não poluindo meu escopo global
Os principais beneficios de funcoes imediatas, Evitar a poluição do escopo global, Privacidade de dados , Closures, Renovar variaveis, Capturar o objeto Global.

2.5.1. Proxy - Parte I
https://youtu.be/TOpNbEB9_IQ
Proxy, conceito de metaprogramação E um objeto que representa outro objeto, intercenptar todas as operaçoes que faz em nosso objeto destino.

2.5.2. Proxy - Parte II 
https://youtu.be/UZE4Md_B9oA
Reflect API que facilita a manipulação dos proxys

2.5.2. Proxy - Parte II
https://youtu.be/ZJYD7hvmuzs
Curry Conceito de programacao funcional uma func com varios parametros, transfromando ela em varias funçoes, em aplicaçoes q envolve reutilzar funçoes que se reaproveitam com parametros


